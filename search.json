[{"path":"https://przechoj.github.io/gips/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://przechoj.github.io/gips/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Przemyslaw Chojecki. Author, maintainer. Pawel Morgen. Author. Bartosz Kolodziejek. Author.","code":""},{"path":"https://przechoj.github.io/gips/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chojecki P, Morgen P, Kolodziejek B (2022). gips: Gaussian Model Invariant Permutation Symmetry. https://github.com/PrzeChoj/gips, https://przechoj.github.io/gips/.","code":"@Manual{,   title = {gips: Gaussian Model Invariant by Permutation Symmetry},   author = {Przemyslaw Chojecki and Pawel Morgen and Bartosz Kolodziejek},   year = {2022},   note = {https://github.com/PrzeChoj/gips, https://przechoj.github.io/gips/}, }"},{"path":"https://przechoj.github.io/gips/index.html","id":"gips","dir":"","previous_headings":"","what":"Gaussian Model Invariant by Permutation Symmetry","title":"Gaussian Model Invariant by Permutation Symmetry","text":"gips - Gaussian model Invariant Permutation Symmetry gips R package finds permutation symmetry group covariance matrix given data invariant . Knowledge permutation can drastically decrease number parameters needed fit model. means gips, possible find Gaussian model parameters number observations. Sometimes, even number observations bigger number parameters, covariance matrix found gips better approximates actual covariance behind data.","code":""},{"path":"https://przechoj.github.io/gips/index.html","id":"gips-will-help-you-with-two-things","dir":"","previous_headings":"","what":"gips will help you with two things:","title":"Gaussian Model Invariant by Permutation Symmetry","text":"Exploratory Data Analysis - gips, can find permutation features change covariance matrix. Modeling - gips, can accurately use found permutation fit normal models like LDA QDA.","code":""},{"path":"https://przechoj.github.io/gips/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gaussian Model Invariant by Permutation Symmetry","text":"can install development version gips GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"PrzeChoj/gips\")"},{"path":"https://przechoj.github.io/gips/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Gaussian Model Invariant by Permutation Symmetry","text":"basic example shows solve common problem:","code":"library(gips) ## TODO(too little data to estimate covariance matrix -> `gips` will find the matrix)"},{"path":"https://przechoj.github.io/gips/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Gaussian Model Invariant by Permutation Symmetry","text":"developed Przemysław Chojecki Paweł Morgen leadership Ph.D. Bartosz Kołodziejek.","code":""},{"path":"https://przechoj.github.io/gips/reference/G_function.html","id":null,"dir":"Reference","previous_headings":"","what":"G_function for log_posteriori_of_gips() — G_function","title":"G_function for log_posteriori_of_gips() — G_function","text":"G_function log_posteriori_of_gips()","code":""},{"path":"https://przechoj.github.io/gips/reference/G_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"G_function for log_posteriori_of_gips() — G_function","text":"","code":"G_function(structure_constants, delta = 3)"},{"path":"https://przechoj.github.io/gips/reference/G_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"G_function for log_posteriori_of_gips() — G_function","text":"structure_constants Constants get_structure_constants function. delta Parameter method.","code":""},{"path":"https://przechoj.github.io/gips/reference/G_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"G_function for log_posteriori_of_gips() — G_function","text":"Sum logarithms elements calculate_gamma_omega L. log product part equation (27). information, see Issue #3 gips' GitHub.","code":""},{"path":"https://przechoj.github.io/gips/reference/G_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"G_function for log_posteriori_of_gips() — G_function","text":"","code":"perm_size <- 6 perm <- permutations::as.cycle(permutations::as.word(c(2, 3, 1, 5, 4, 6))) gips_perm <- gips_perm(perm, perm_size) structure_constants <- get_structure_constants(gips_perm) gips:::G_function(structure_constants, 3) #> [1] 2.799934"},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform gips_perm object to character vector — as.character.gips_perm","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":"Implementation S3 method.","code":""},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":"","code":"# S3 method for gips_perm as.character(x, ...)"},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":"x object gips_perm class. ... arguments passed permutations::.character.cycle().","code":""},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":"object character type.","code":""},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":".character(gips_perm):","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Gamma function — calculate_gamma_function","title":"Calculate Gamma function — calculate_gamma_function","text":"calculates value integral defined Definition 11 references. implementation Theorem 8 references using formula (19) references.","code":""},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Gamma function — calculate_gamma_function","text":"","code":"calculate_gamma_function(perm, lambda)"},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Gamma function — calculate_gamma_function","text":"perm object class gips_perm. lambda positive real number.","code":""},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Gamma function — calculate_gamma_function","text":"Value Gamma function.","code":""},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Gamma function — calculate_gamma_function","text":"Piotr Graczyk, Hideyuki Ishi, Bartosz Kolodziejek, Hélène Massam. \"Model selection space Gaussian models invariant symmetry.\" Annals Statistics, 50(3) 1747-1774 June 2022. DOI: 10.1214/22-AOS2174","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Gamma function — calculate_gamma_function","text":"","code":"id_perm <- gips_perm(permutations::id, 2) calculate_gamma_function(id_perm, 0.5001)  # 10.7... #> [1] 10.70139 calculate_gamma_function(id_perm, 0.50000001)  # 19.9... #> [1] 19.91198 calculate_gamma_function(id_perm, 0.500000000001)  # 29.1... #> [1] 29.12235 # calculate_gamma_function(id_perm, 0.5) # integral diverges; returns Inf and warning"},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_omega.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate single Gamma omega function — calculate_gamma_omega","title":"Calculate single Gamma omega function — calculate_gamma_omega","text":"Using formula (12) paper","code":""},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_omega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate single Gamma omega function — calculate_gamma_omega","text":"","code":"calculate_gamma_omega(lambda, dim_omega_i, r_i, d_i)"},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_omega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate single Gamma omega function — calculate_gamma_omega","text":"lambda positive real number. dim_omega_i Single element get_structure_constants. r_i Single element get_structure_constants. d_i Single element get_structure_constants.","code":""},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_omega.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate single Gamma omega function — calculate_gamma_omega","text":"Logarithm value Gamma function.","code":""},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Maximum A Posteriori Estimation — find_MAP","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"Use one optimization algorithms find permutation maximizes posteriori based observed data. optimization algorithms always find MAP, try find significant value. information can found 'Possible algorithms use optimizers' section .","code":""},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"","code":"find_MAP(   g,   max_iter = NA,   return_probabilities = FALSE,   show_progress_bar = TRUE,   optimizer = NA )"},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"g Object gips class max_iter Number iterations algorithm perform. least 2. optimizer==\"MH\" finite; optimizer==\"HC\" can infinite; optimizer==\"BF\" used. return_probabilities boolean. TRUE can provided optimizer==\"MH\". Whether use Metropolis-Hastings results calculate posterior probabilities. show_progress_bar boolean. Indicate whether show progress bar. max_iter infinite, show_progress_bar FALSE. optimizer optimizer search maximum posteriori. \"MH\" (default unoptimized g) - Metropolis-Hastings \"HC\" - Hill Climbing \"BF\" - Brute Force \"continue\" (default optimized g) - g optimized (see Examples). details, see \"Possible algorithms use optimizers\" section .","code":""},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"object class gips.","code":""},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"possible-algorithms-to-use-as-optimizers","dir":"Reference","previous_headings":"","what":"Possible algorithms to use as optimizers","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"\"Metropolis_Hastings\", \"MH\" - use Metropolis-Hastings algorithm; see Wikipedia. algorithm draw random transposition every iteration consider changing current one. max_iter reached, algorithm return MAP Estimator best permutation calculated far. \"hill_climbing\", \"HC\" - use hill climbing algorithm; see Wikipedia. algorithm check transpositions every iteration go one biggest posteriori value. optimization ends neighbors smaller posteriori value. max_iter reached end, warning shown, recommended start optimization output find_MAP(). Remember p*(p-1)/2 transpositions checked every iteration. bigger p, may costly. \"brute_force\", \"BF\", \"full\" - use Brute Force algorithm checks whole permutation space given size. algorithm definitely find Maximum Posteriori Estimation computationally expensive bigger space.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"","code":"require(\"MASS\") # for mvrnorm() #> Loading required package: MASS  perm_size <- 6 mu <- numeric(perm_size) sigma_matrix <- matrix(   data = c(     1.0, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.0, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.0, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.0, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.0, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.0   ),   nrow = perm_size, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5,6) number_of_observations <- 13 Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) S <- (t(Z) %*% Z) / number_of_observations # the theoretical mean is 0  g <- gips(S, number_of_observations)  g_map <- find_MAP(g, max_iter = 10, show_progress_bar = FALSE, optimizer = \"MH\") g_map #> The permutation (1,4) has log posteriori -3.72731627187706 which was found after 10 log_posteriori calculations.  g_map2 <- find_MAP(g_map, max_iter = 10, show_progress_bar = FALSE, optimizer = \"continue\")  if (require(\"graphics\")) {   plot(g_map2, type = \"both\", logarithmic_x = TRUE) }   g_map_BF <- find_MAP(g, show_progress_bar = FALSE, optimizer = \"BF\") summary(g_map_BF) #> The optimized `gips` object. #>  #> Permutation: #>  (1,2,3,4,5,6) #>  #> Log_posteriori: #>  -1.019395e-05 #>  #> Number of observations: #>  13 #>  #> n0: #>  1 #>  #> Number of observations is bigger than n0 for this permutaion, so the gips model based on the found permutation does exist. #>  #> -------------------------------------------------------------------------------- #> Optimization algorithm: #>  brute_force #>  #> Number of log_posteriori calls: #>  720 #>  #> Optimization time: #>  2.010744 secs"},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Structure Constants — get_structure_constants","title":"Get Structure Constants — get_structure_constants","text":"Constants useful internal calculations integrals eventually posteriori probability log_posteriori_of_gips().","code":""},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Structure Constants — get_structure_constants","text":"","code":"get_structure_constants(perm)"},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Structure Constants — get_structure_constants","text":"perm object class gips_perm.","code":""},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Structure Constants — get_structure_constants","text":"list 5 items: r, d, k, L, dim_omega - vectors constants Theorem 1 references beginning section 3.1. references.","code":""},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Structure Constants — get_structure_constants","text":"Uses Theorem 5 references calculate constants.","code":""},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Structure Constants — get_structure_constants","text":"Piotr Graczyk, Hideyuki Ishi, Bartosz Kolodziejek, Hélène Massam. \"Model selection space Gaussian models invariant symmetry.\" Annals Statistics, 50(3) 1747-1774 June 2022. DOI: 10.1214/22-AOS2174","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Structure Constants — get_structure_constants","text":"","code":"perm <- gips_perm(permutations::as.word(c(1, 2, 3, 5, 4)), 5) get_structure_constants(perm) #> $r #> [1] 4 1 #>  #> $d #> [1] 1 1 #>  #> $k #> [1] 1 1 #>  #> $L #> [1] 2 #>  #> $dim_omega #> [1] 10  1 #>"},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":null,"dir":"Reference","previous_headings":"","what":"The constructor of the gips class. — gips","title":"The constructor of the gips class. — gips","text":"Create gips object. object consist data information needed find likely invariant permutation. optimization performed. One must call find_MAP() function . See examples .","code":""},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The constructor of the gips class. — gips","text":"","code":"gips(S, number_of_observations, delta = 3, D_matrix = NULL, perm = \"\")  new_gips(   list_of_gips_perm,   S,   number_of_observations,   delta,   D_matrix,   optimization_info )  validate_gips(g)"},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The constructor of the gips class. — gips","text":"S matrix; estimated covariance matrix. Z observed data: one know theoretical mean 0, use S = (t(Z) %*% Z) / number_of_observations; one know theoretical mean estimate observed mean, use S = cov(Z) set number_of_observations parameter 1 less real number observations. TODO(Make parameter change line : \"set parameter mean_estimated TRUE\"). number_of_observations number data points S based . delta hyper-parameter Bayesian model. bigger 2. D_matrix hyper-parameter Bayesian model. Square matrix size S. NULL, identity matrix taken. perm optional permutation base gips object. Can class gips_perm permutation anything function permutations::permutation() can handle. list_of_gips_perm list single element class gips_perm. base object gips object. optimization_info NULL list information optimization process. g Element checked proper element class gips.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The constructor of the gips class. — gips","text":"Object class gips.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"The constructor of the gips class. — gips","text":"new_gips(): Constructor. intended low-level use. validate_gips(): Validator. intended low-level use.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"methods-for-class-gips","dir":"Reference","previous_headings":"","what":"Methods for class gips","title":"The constructor of the gips class. — gips","text":"summary.gips() plot.gips() print.gips()","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The constructor of the gips class. — gips","text":"","code":"require(\"MASS\") # for mvrnorm()  perm_size <- 6 mu <- numeric(perm_size) sigma_matrix <- matrix(   data = c(     1.0, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.0, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.0, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.0, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.0, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.0   ),   nrow = perm_size, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5,6) number_of_observations <- 13 Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) S <- (t(Z) %*% Z) / number_of_observations # the theoretical mean is 0  g <- gips(S, number_of_observations)  g_map <- find_MAP(g, max_iter = 10, show_progress_bar = FALSE, optimizer = \"MH\") g_map #> The permutation (1,4)(2,5) has log posteriori 6.38640087815154 which was found after 10 log_posteriori calculations.  summary(g_map) #> The optimized `gips` object. #>  #> Permutation: #>  (1,4)(2,5) #>  #> Log_posteriori: #>  6.386401 #>  #> Number of observations: #>  13 #>  #> n0: #>  4 #>  #> Number of observations is bigger than n0 for this permutaion, so the gips model based on the found permutation does exist. #>  #> -------------------------------------------------------------------------------- #> Optimization algorithm: #>  Metropolis_Hastings #>  #> Number of log_posteriori calls: #>  10 #>  #> Optimization time: #>  0.02277207 secs #>  #> Acceptance rate: #>  0.2 #>  #> Log_posteriori calls after the found permutation: #>  0  if (require(\"graphics\")) {   plot(g_map, type = \"both\", logarithmic_x = TRUE) }"},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation object — gips_perm","title":"Permutation object — gips_perm","text":"Create permutation objects passed functions gips package.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation object — gips_perm","text":"","code":"gips_perm(x, size)  new_gips_perm(rearranged_cycles, size)  validate_gips_perm(g)"},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation object — gips_perm","text":"x object created permutations package object can processed permutations::permutation() function. size integer. Size permutation (AKA cardinality set, permutation defined). rearranged_cycles list rearranged integer vectors. vector corresponds single cycle permutation. g Element checked proper element gips_perm class.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation object — gips_perm","text":"Object class gips_perm.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Permutation object — gips_perm","text":"new_gips_perm(): Constructor. intended low-level use. validate_gips_perm(): Validator. intended low-level use.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"methods-for-class-gips","dir":"Reference","previous_headings":"","what":"Methods for class gips","title":"Permutation object — gips_perm","text":".character.gips_perm() print.gips_perm()","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation object — gips_perm","text":"","code":"gperm <- gips_perm(permutations::as.word(c(1, 2, 3, 5, 4)), 5) gperm <- gips_perm(permutations::as.cycle(\"(5,4)\"), 5) # note the necessity of `size` parameter gperm <- gips_perm(permutations::as.cycle(\"(5,4)\"), 7) gperm <- gips_perm(\"(1,2)(5,4)\", 7) gperm #> [1] (12)(45)  # gperm <- gips_perm(permutations::as.cycle(\"(5,4)\"), 3) # Error, `size` equals 3 while the maximum element is 5."},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":null,"dir":"Reference","previous_headings":"","what":"A log of a posteriori that the covariance matrix is invariant under permutation. — log_posteriori_of_gips","title":"A log of a posteriori that the covariance matrix is invariant under permutation. — log_posteriori_of_gips","text":"precisely, logarithm unnormalized posterior probability. goal function optimization algorithms find_MAP() function. perm_proposal maximizes function Maximum Posteriori (MAP) Estimator.","code":""},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A log of a posteriori that the covariance matrix is invariant under permutation. — log_posteriori_of_gips","text":"","code":"log_posteriori_of_gips(g)"},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A log of a posteriori that the covariance matrix is invariant under permutation. — log_posteriori_of_gips","text":"g object class gips_perm.","code":""},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A log of a posteriori that the covariance matrix is invariant under permutation. — log_posteriori_of_gips","text":"calculated using formulas (33) (27) references. Inf NaN reached, produces warning.","code":""},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A log of a posteriori that the covariance matrix is invariant under permutation. — log_posteriori_of_gips","text":"Piotr Graczyk, Hideyuki Ishi, Bartosz Kolodziejek, Hélène Massam. \"Model selection space Gaussian models invariant symmetry.\" Annals Statistics, 50(3) 1747-1774 June 2022. DOI: 10.1214/22-AOS2174","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A log of a posteriori that the covariance matrix is invariant under permutation. — log_posteriori_of_gips","text":"","code":"# In the space with p = 2, there is only 2 permutations: perm1 <- permutations::as.cycle(permutations::as.word(c(1, 2)))  # (1)(2) perm2 <- permutations::as.cycle(permutations::as.word(c(2, 1)))  # (1,2) S1 <- matrix(c(1, 0.5, 0.5, 2), nrow = 2, byrow = TRUE) g1 <- gips(S1, 100, perm = perm1) g2 <- gips(S1, 100, perm = perm2) log_posteriori_of_gips(g1)  # -136.6, this is the MAP Estimator #> [1] -136.6382 log_posteriori_of_gips(g2)  # -140.4 #> [1] -140.3602  exp(log_posteriori_of_gips(g1) - log_posteriori_of_gips(g2))  # 41.3 #> [1] 41.34599 # g1 is over 40 times more likely than g2. # This is the expected outcome because S[1,1] significantly differs from S[2,2].  # ========================================================================  S2 <- matrix(c(1, 0.5, 0.5, 1.1), nrow = 2, byrow = TRUE) g1 <- gips(S2, 100, perm = perm1) g2 <- gips(S2, 100, perm = perm2) log_posteriori_of_gips(g1)  # -99.5 #> [1] -99.47546 log_posteriori_of_gips(g2)  # -96.9, this is the MAP Estimator #> [1] -96.93446  exp(log_posteriori_of_gips(g2) - log_posteriori_of_gips(g1))  # 12.7 #> [1] 12.69235 # g2 is over 12 times more likely than g1. # This is the expected outcome because S[1,1] is very close to S[2,2]."},{"path":"https://przechoj.github.io/gips/reference/plot.gips.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot optimized matrix or optimization gips object — plot.gips","title":"Plot optimized matrix or optimization gips object — plot.gips","text":"Plot heatmap MAP covariance matrix estimator convergence optimization method. plot depends type argument.","code":""},{"path":"https://przechoj.github.io/gips/reference/plot.gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot optimized matrix or optimization gips object — plot.gips","text":"","code":"# S3 method for gips plot(   x,   type = NA,   logarithmic_y = TRUE,   logarithmic_x = FALSE,   color = NULL,   title_text = \"Convergence plot\",   xlabel = NULL,   ylabel = NULL,   show_legend = TRUE,   ylim = NULL,   xlim = NULL,   ... )"},{"path":"https://przechoj.github.io/gips/reference/plot.gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot optimized matrix or optimization gips object — plot.gips","text":"x Object class gips. type single character. One c(\"heatmap\", \"\", \"best\", \"\"). \"heatmap\" - Plots heatmap S matrix inside gips object projected permutation gips object. \"\" - Plots line posteriori visited states. \"best\" - Plots line biggest posteriori moment. \"\" - Plots lines \"\" \"best\". default value NA, changed \"heatmap\" non-optimized gips objects \"\" optimized ones. Using default produces warning. arguments ignored type = \"heatmap\". logarithmic_y, logarithmic_x boolean. Sets axis plot logarithmic scale. color Vector colors used plot lines. title_text Text title plot. xlabel Text bottom plot. ylabel Text left plot. show_legend boolean. Whether show legend. ylim Limits y axis. NULL, minimum maximum log_posteriori_of_gips() taken. xlim Limits x axis. NULL, whole optimization process shown. ... Additional arguments passed stats::heatmap() various elements plot.","code":""},{"path":"https://przechoj.github.io/gips/reference/plot.gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot optimized matrix or optimization gips object — plot.gips","text":"invisible NULL.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/plot.gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot optimized matrix or optimization gips object — plot.gips","text":"","code":"require(\"MASS\") # for mvrnorm()  perm_size <- 6 mu <- numeric(perm_size) sigma_matrix <- matrix(   data = c(     1.0, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.0, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.0, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.0, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.0, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.0   ),   nrow = perm_size, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5,6) number_of_observations <- 13 Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) S <- (t(Z) %*% Z) / number_of_observations # the theoretical mean is 0  g <- gips(S, number_of_observations) if (require(\"graphics\")) {   plot(g, type = \"heatmap\") }   g_map <- find_MAP(g, max_iter = 30, show_progress_bar = FALSE, optimizer = \"MH\") if (require(\"graphics\")) {   plot(g_map, type = \"both\", logarithmic_x = TRUE) }   if (require(\"graphics\")) {   plot(g, type = \"heatmap\") } # Now, the output is (most likely) different because the permutation      # `g_map[[1]]` is (most likely) not an identity permutation."},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare orthogonal matrix — prepare_orthogonal_matrix","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"Calculate orthogonal matrix U_Gamma decomposition Theorem 1 references.","code":""},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"","code":"prepare_orthogonal_matrix(perm, perm_size = NULL, basis = NULL)"},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"perm Object class gips_perm permutations::cycle. perm_size Size permutation. Required perm permutations::cycle class. basis matrix basis vectors COLUMNS. Identity default.","code":""},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"matrix perm_size x perm_size columns V object elements, sorted according Theorem 6.","code":""},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"Given X - invariant permutation perm. Call Gamma permutations cyclic group \\(<perm> = {perm, perm^2, ...}\\). , U_Gamma orthogonal matrix X \"pretty\" . precise, matrix t(U_Gamma) %*% X %*% U_Gamma lot zeros (see examples). calculate , Theorem 6 references used.","code":""},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"Piotr Graczyk, Hideyuki Ishi, Bartosz Kolodziejek, Hélène Massam. \"Model selection space Gaussian models invariant symmetry.\" Annals Statistics, 50(3) 1747-1774 June 2022. DOI: 10.1214/22-AOS2174","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"","code":"gperm <- gips_perm(\"(1,2,3)(4,5)\", 5) U_g <- prepare_orthogonal_matrix(gperm)  number_of_observations <- 10 X <- matrix(rnorm(5 * number_of_observations), number_of_observations, 5) S <- cov(X) X <- project_matrix(S, perm = gperm)  # this matrix in invariant under gperm  t(U_g) %*% X %*% U_g  # the non-zeros only on diagonal and [1,2] and [2,1] #>               [,1]          [,2]          [,3]          [,4]      [,5] #> [1,]  1.371436e+00 -1.842174e-01 -2.220446e-16  0.000000e+00 0.0000000 #> [2,] -1.842174e-01  8.214676e-01  2.081668e-17 -2.775558e-17 0.0000000 #> [3,] -2.498002e-16  2.943923e-17  8.677894e-01  2.220446e-16 0.0000000 #> [4,]  1.665335e-16 -2.943923e-17  2.220446e-16  8.677894e-01 0.0000000 #> [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 0.4806179"},{"path":"https://przechoj.github.io/gips/reference/print.gips.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing gips object — print.gips","title":"Printing gips object — print.gips","text":"Printing function gips class.","code":""},{"path":"https://przechoj.github.io/gips/reference/print.gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing gips object — print.gips","text":"","code":"# S3 method for gips print(x, log_value = TRUE, digits = Inf, ...)"},{"path":"https://przechoj.github.io/gips/reference/print.gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing gips object — print.gips","text":"x object gips class. log_value logical. Whether print exp value log_posteriori_of_gips() leave logarithmic form. digits number digits comma posteriori presented. can negative. default, Inf. passed base::round(). ... additional arguments passed base::cat().","code":""},{"path":"https://przechoj.github.io/gips/reference/print.gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing gips object — print.gips","text":"Invisible NULL.","code":""},{"path":"https://przechoj.github.io/gips/reference/print.gips_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing gips_perm object — print.gips_perm","title":"Printing gips_perm object — print.gips_perm","text":"Printing function gips_perm class.","code":""},{"path":"https://przechoj.github.io/gips/reference/print.gips_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing gips_perm object — print.gips_perm","text":"","code":"# S3 method for gips_perm print(x, ...)"},{"path":"https://przechoj.github.io/gips/reference/print.gips_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing gips_perm object — print.gips_perm","text":"x object gips_perm class. ... arguments passed permutations::print.cycle().","code":""},{"path":"https://przechoj.github.io/gips/reference/print.gips_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing gips_perm object — print.gips_perm","text":"Returns argument invisibly, printing .","code":""},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Project matrix — project_matrix","title":"Project matrix — project_matrix","text":"Project matrix space symmetrical matrices invariant cyclic group permutations.","code":""},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project matrix — project_matrix","text":"","code":"project_matrix(S, perm, precomputed_equal_indices = NULL)"},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project matrix — project_matrix","text":"S square matrix projected. perm permutation. Generator permutation group. Either gips_perm permutations::cycle class. precomputed_equal_indices parameter used internal calculations equal indices already calculated. case, leave parameter NULL, computed.","code":""},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project matrix — project_matrix","text":"projected matrix.","code":""},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Project matrix — project_matrix","text":"S sample covariance matrix (output cov(X) function, see examples), S unbiased estimator covariance matrix. However, maximum likelihood estimator covariance matrix S*(n-1)/(n), unless p > n, maximum likelihood estimator exist. information, see Wikipedia page Estimation covariance matrices. maximum likelihood estimator differs one knows covariance matrix invariant permutation. estimator symmetric also values (see examples). estimator invariant given permutation. Also, need fewer observations maximum likelihood estimator exist (see summary.gips()). permutations, even n = 1 enough.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project matrix — project_matrix","text":"","code":"p <- 6 gperm <- gips_perm(permutations::as.word(c(4, 3, 2, 1, 5)), p) # permutation (1,4)(2,3)(5)(6)  number_of_observations <- 10 X <- matrix(rnorm(p * number_of_observations), number_of_observations, p) S <- cov(X) projected_S <- project_matrix(S, perm = gperm) projected_S #>             [,1]         [,2]         [,3]        [,4]        [,5]       [,6] #> [1,]  1.11793935 -0.022843532 -0.122983954 -0.02754355 0.232832094 -0.2860804 #> [2,] -0.02284353  0.317676234  0.161411471 -0.12298395 0.002838817 -0.1171623 #> [3,] -0.12298395  0.161411471  0.317676234 -0.02284353 0.002838817 -0.1171623 #> [4,] -0.02754355 -0.122983954 -0.022843532  1.11793935 0.232832094 -0.2860804 #> [5,]  0.23283209  0.002838817  0.002838817  0.23283209 0.763634358  0.1365933 #> [6,] -0.28608043 -0.117162306 -0.117162306 -0.28608043 0.136593322  0.5506065 # The value in [1,1] is the same as in [4,4]; also, [2,2] and [3,3];   # also [1,2] and [4,3]; also, [1,5] and [4,5]; and so on  # Plot the projected matrix: g <- gips(S, number_of_observations, perm = gperm) plot(g, type = 'heatmap')   # Find the MAP Estimator g_MAP <- find_MAP(g, max_iter = 10, show_progress_bar = FALSE, optimizer = \"MH\") S_MAP <- project_matrix(S, perm = g_MAP[[1]]) S_MAP #>             [,1]        [,2]        [,3]        [,4]        [,5]        [,6] #> [1,]  0.80577382 -0.03084443 -0.16190734 -0.16190734  0.16689242 -0.09663271 #> [2,] -0.03084443  0.19874243 -0.03084443 -0.03084443 -0.05963455 -0.03084443 #> [3,] -0.16190734 -0.03084443  0.80577382 -0.09663271  0.16689242 -0.16190734 #> [4,] -0.16190734 -0.03084443 -0.09663271  0.80577382  0.16689242 -0.16190734 #> [5,]  0.16689242 -0.05963455  0.16689242  0.16689242  0.76363436  0.16689242 #> [6,] -0.09663271 -0.03084443 -0.16190734 -0.16190734  0.16689242  0.80577382 plot(g_MAP, type = 'heatmap')"},{"path":"https://przechoj.github.io/gips/reference/runif_transposition.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniformly random transposition of perm_size elements — runif_transposition","title":"Uniformly random transposition of perm_size elements — runif_transposition","text":"Uniformly random transposition perm_size elements","code":""},{"path":"https://przechoj.github.io/gips/reference/runif_transposition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniformly random transposition of perm_size elements — runif_transposition","text":"","code":"runif_transposition(perm_size)"},{"path":"https://przechoj.github.io/gips/reference/runif_transposition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniformly random transposition of perm_size elements — runif_transposition","text":"perm_size size take transpositions.","code":""},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing the gips object — summary.gips","title":"Summarizing the gips object — summary.gips","text":"summary method class \"gips\".","code":""},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing the gips object — summary.gips","text":"","code":"# S3 method for gips summary(object, ...)  # S3 method for summary.gips print(x, ...)"},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing the gips object — summary.gips","text":"object object class \"gips\"; usually result find_MAP(). ... arguments passed methods. x object class \"summary.gips\" printed","code":""},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing the gips object — summary.gips","text":"function summary.gips computes returns list summary statistics given gips object. : unoptimized gips object: optimized - FALSE start_permutation - permutation gips represents start_permutation_log_posteriori - log posteriori value start permutation n0 - minimal number observations needed MAP Estimator covariance matrix exist S_matrix - underlying matrix; used calculate posteriori value number_of_observations - number observations observed S_matrix calculated; used calculate posteriori value delta, D_matrix - parameters Bayesian method optimized gips object: optimized - TRUE found_permutation - permutation gips represents; visited permutation biggest posteriori value found_permutation_log_posteriori - log posteriori value found permutation start_permutation - original permutation gips represented optimization; first visited permutation start_permutation_log_posteriori - log posteriori value start permutation n0 - minimal number observations needed MAP Estimator covariance matrix exist S_matrix - underlying matrix; used calculate posteriori value number_of_observations - number observations observed S_matrix calculated; used calculate posteriori value delta, D_matrix - parameters Bayesian method optimization_algorithm_used - used optimization algorithms order (one start optimization \"MH\", \"HC\") did_converge - boolean, last used algorithm converge number_of_log_posteriori_calls - many times log_posteriori_of_gips() function called optimization full_optimization_time - long optimization process; sum optimization times (multiple) log_posteriori_calls_after_best - many times log_posteriori_of_gips() function called found_permutation; words, long ago optimization stopped result; value small, consider running find_MAP() one time optimizer = \"continue\" acceptance_rate - interesting optimizer = \"MH\"; often algorithm accepting change permutation iteration","code":""},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Summarizing the gips object — summary.gips","text":"print(summary.gips): Printing method class \"summary.gips\". Prints every interesting information pleasant, human readable form","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing the gips object — summary.gips","text":"","code":"require(\"MASS\") # for mvrnorm()  perm_size <- 6 mu <- numeric(perm_size) sigma_matrix <- matrix(   data = c(     1.0, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.0, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.0, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.0, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.0, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.0   ),   nrow = perm_size, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5,6) number_of_observations <- 13 Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) S <- (t(Z) %*% Z) / number_of_observations # the theoretical mean is 0  g <- gips(S, number_of_observations)  g_map <- find_MAP(g, max_iter = 10, show_progress_bar = FALSE, optimizer = \"MH\") unclass(summary(g_map)) #> $optimized #> [1] TRUE #>  #> $found_permutation #> [1] (36) #>  #> $found_permutation_log_posteriori #> [1] -1.665109 #>  #> $start_permutation #> [1] () #>  #> $start_permutation_log_posteriori #> [1] -3.572213 #>  #> $n0 #> [1] 5 #>  #> $S_matrix #>           [,1]       [,2]      [,3]      [,4]       [,5]      [,6] #> [1,] 0.7046258 0.25944651 0.4280105 0.2085035 0.65368278 0.4851188 #> [2,] 0.2594465 0.37228955 0.2869787 0.1382038 0.02536076 0.1106716 #> [3,] 0.4280105 0.28697872 0.5601828 0.4493747 0.59040651 0.3172024 #> [4,] 0.2085035 0.13820380 0.4493747 0.6698880 0.74018767 0.4290167 #> [5,] 0.6536828 0.02536076 0.5904065 0.7401877 1.36850969 0.8034639 #> [6,] 0.4851188 0.11067159 0.3172024 0.4290167 0.80346394 0.5969331 #>  #> $number_of_observations #> [1] 13 #>  #> $delta #> [1] 3 #>  #> $D_matrix #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    0    0    0    0    0 #> [2,]    0    1    0    0    0    0 #> [3,]    0    0    1    0    0    0 #> [4,]    0    0    0    1    0    0 #> [5,]    0    0    0    0    1    0 #> [6,]    0    0    0    0    0    1 #>  #> $optimization_algorithm_used #> [1] \"Metropolis_Hastings\" #>  #> $did_converge #> NULL #>  #> $number_of_log_posteriori_calls #> [1] 10 #>  #> $full_optimization_time #> Time difference of 0.02336025 secs #>  #> $log_posteriori_calls_after_best #> [1] 0 #>  #> $acceptance_rate #> [1] 0.1 #>   g_map2 <- find_MAP(g, max_iter = 10, show_progress_bar = FALSE, optimizer = \"HC\") summary(g_map2) #> The optimized `gips` object. #>  #> Permutation: #>  (1,4)(3,6) #>  #> Log_posteriori: #>  1.070716 #>  #> Number of observations: #>  13 #>  #> n0: #>  4 #>  #> Number of observations is bigger than n0 for this permutaion, so the gips model based on the found permutation does exist. #>  #> -------------------------------------------------------------------------------- #> Optimization algorithm: #>  hill_climbing did converge #>  #> Number of log_posteriori calls: #>  46 #>  #> Optimization time: #>  0.1008034 secs #>  #> Log_posteriori calls after the found permutation: #>  18"}]
